[path]
bin_dir = ''
conf_dir = './'
tmp_dir = './tmp'
log_dir = './log'

# Service-wide settings

[common]
debug = False
version = '0.0.1.trunk'
commit = None

primary = True            # Set to False if you use several wfb instances on one card. Only primary instance will set radio channel.
log_file = None           # Set to "wifibroadcast.log" to disable log to stdout

set_nm_unmanaged = True   # Set radio interface in 'unmanaged state' in NetworkManager
radio_mtu = 1445          # Used for mavlink aggregation and for tunnel packets - should be less or equal to MAX_PAYLOAD_SIZE, don't change if doubt
tunnel_agg_timeout= 0.005 # aggragate tuntap packets if less than radio_mtu but no longer than 5ms
mavlink_agg_timeout = 0.1 # aggragate mavlink packets if less than radio_mtu but no longer than 100ms
mavlink_err_rate = True   # If true then inject RX error rate else absolute values
tx_sel_delta = 3          # hysteresis for antenna selection, [dB]
tx_rcv_buf_size = 524288  # UDP SO_RCVBUF. Set 0 to use net.core.rmem_default. Increase in case of non-cbr data stream

wifi_channel = 165        # radio channel @5825 MHz, range: 5815-5835 MHz, width 20MHz
                          # Also you can set own frequency channel for each wifi card, for example:
                          # {'wlan0': 161, 'wlan1': 165}

wifi_region = 'BO'        # Set CRDA region
wifi_txpower = None       # Leave None to use default power settings from driver.
                          # For 8812au set to -dBm * 100. I.e for 30dBm set to -3000
                          # For 8812eu set to dBm * 100. I.e for 30dBm set to 3000

temp_measurement_interval = 10  # [s] (8812eu only) Internal RF path temp measurement.
temp_overheat_warning = 60      # [*C] (8812eu only) Overheat warning threshold.


## Stream allocation scheme:

# Down streams (vehicle to GS): 0 - 127
# Up streams (GS to vehicle):   128 - 255
# Stream ranges:
#  0 - 15: video streams, 0 is default video stream
# 16 - 31: mavlink streams, 16 is default mavlink stream
# 32 - 47: tunnel streams, 32 is default tunnel stream
# All other ranges reserved for future use


###################################################################################################
# WFB-ng top level profiles available as systemctl services wifibroadcast@<profile1>[:<profile2>] #
# You can define any amount of such profiles                                                      #
###################################################################################################

## Required fiels in top level profiles
## 1. "streams" -- that have required keys: "name", "service_type" and "profiles". Any other k/v pairs can be used to override values inherided from low level profiles.
## 2. "stats_port" -- UDP port for CLI. Should be int or None to disable statistics completely.
## 3. "link_domain" -- moved from common.link_id

## All streams can be point-to-point(one- or two-way transfers) or point-to-multipoint(one-way transfers only), but not multipoint-to-point or multipoint-to-multipoint
## In case of one-way stream you can specify only "stream_rx" on RX side and "stream_tx" on TX side.
## For two-way streams you need to specify both of them

## One-way stream types:  udp_direct_rx, udp_direct_tx, udp_proxy
## Two-way stream types:  mavlink, tunnel, udp_proxy

[udp_drone]
streams = [{'name': 'udp_tun', 'stream_rx': 0xa0,'stream_tx': 0x20, 'service_type': 'tunnel', 'profiles': ['base', 'drone_base', 'tunnel', 'drone_udp_tun']}]
stats_port = 8002
link_domain = "udp_tun"

[udp_gs]
streams = [{'name': 'udp_tun', 'stream_rx': 0x20,'stream_tx': 0xa0, 'service_type': 'tunnel', 'profiles': ['base', 'gs_base', 'tunnel', 'gs_udp_tun']}]
stats_port = 8002
link_domain = "udp_tun"

###########################################################################################################################
# Low level profiles can be used to build top level profiles via inheritance                                                     #
# You can define any number of them and split options between them as you want - only resulting set of options has matter #
###########################################################################################################################

## Low level profiles have protocol-dependant fields

[base]
stream_rx = None
stream_tx = None
keypair = None
mirror = False     # Set to true if you want to mirror packet via all cards for redundancy. Not recommended if cards are on one frequency channel.

# Radio settings for TX and RX
bandwidth = 20     # bandwidth 20 or 40 MHz
force_vht = False  # Use VHT for 20 and 40 MHz bandwidth

# Radiotap flags for TX:
short_gi = False   # use short GI or not
stbc = 1           # stbc streams: 1, 2, 3 or 0 if unused
ldpc = 1           # use LDPC FEC. Currently available only for 8812au and must be supported both on TX and RX.
mcs_index = 1      # mcs index


[drone_base]
keypair = 'drone.key'

[gs_base]
keypair = 'gs.key'

[tunnel]
frame_type = 'data'  # Use data or rts frames
fec_k = 1            # FEC K (For tx side. Rx will get FEC settings from session packet)
fec_n = 2            # FEC N (For tx side. Rx will get FEC settings from session packet)
fec_timeout = 0      # [ms], 0 to disable. If no new packets during timeout, emit one empty packet if FEC block is open

[drone_udp_tun]
ifname = 'wfbtun'
ifaddr = '10.5.0.2/24'
default_route = False

[gs_udp_tun]
ifname = 'wfbtun'
ifaddr = '10.5.0.1/24'
default_route = False

[video]
frame_type = 'data'  # Use data or rts frames
fec_k = 8          # FEC K (For tx side. Rx will get FEC settings from session packet)
fec_n = 12         # FEC N (For tx side. Rx will get FEC settings from session packet)
fec_timeout = 0    # [ms], 0 to disable. If no new packets during timeout, emit one empty packet if FEC block is open
peer = None

